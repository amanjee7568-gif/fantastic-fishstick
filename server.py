import os
import logging
from flask import Flask, request, jsonify, abort
import telebot
from telebot import types

# -------------------
# Logging
# -------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("server")

# -------------------
# Config / ENV
# -------------------
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env var missing!")

# Render ‡§™‡§∞ ‡§Ö‡§ï‡•ç‡§∏‡§∞ external URL env var ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡§æ,
# ‡§á‡§∏‡§≤‡§ø‡§è ‡§§‡•Å‡§Æ WEBHOOK_BASE_URL ‡§ñ‡•Å‡§¶ ‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã (https://<your-app>.onrender.com)
WEBHOOK_BASE_URL = (
    os.environ.get("WEBHOOK_BASE_URL")
    or os.environ.get("RENDER_EXTERNAL_URL")  # ‡§Ö‡§ó‡§∞ Render ‡§¶‡•á ‡§∞‡§π‡§æ ‡§π‡•ã
)
if not WEBHOOK_BASE_URL:
    log.warning("WEBHOOK_BASE_URL not set. Set it in Render -> Environment.")

PORT = int(os.environ.get("PORT", "8000"))
ADMIN_ID = os.environ.get("ADMIN_ID")  # optional (string), ‡§ú‡•à‡§∏‡•á "123456789"

# -------------------
# Bot & App
# -------------------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML", threaded=False)
app = Flask(__name__)

# -------------------
# Simple In-Memory Store (demo)
# NOTE: Production ‡§Æ‡•á‡§Ç DB ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã.
# -------------------
USERS = {}   # {user_id: {"coins": int, "premium": bool}}
WALLETS = {} # {user_id: {"usdt": float, "btc": float, "eth": float}}

def ensure_user(user_id: int):
    if user_id not in USERS:
        USERS[user_id] = {"coins": 100, "premium": False}
        WALLETS[user_id] = {"usdt": 5.0, "btc": 0.0001, "eth": 0.01}

# -------------------
# Keyboards
# -------------------
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üí∞ Wallet", "ü™ô Balance")
    kb.row("‚≠ê Premium", "üéÆ Play")
    kb.row("‚ÑπÔ∏è Help")
    return kb

def admin_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üë• Users Count", "‚ûï Add Coins")
    kb.row("‚¨ÖÔ∏è Back")
    return kb

# -------------------
# Commands
# -------------------
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    user = message.from_user
    ensure_user(user.id)
    text = (
        f"‡§®‡§Æ‡§∏‡•ç‡§§‡•á <b>{user.first_name or 'User'}</b> üëã\n"
        f"‡§Ü‡§™‡§ï‡§æ ‡§Ø‡•Ç‡§ú‡§∞ ID: <code>{user.id}</code>\n\n"
        "‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç:\n"
        "‚Ä¢ üí∞ Wallet ‚Äì ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü‡•ã ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏\n"
        "‚Ä¢ ü™ô Balance ‚Äì ‡§ï‡•â‡§á‡§® ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏\n"
        "‚Ä¢ ‚≠ê Premium ‚Äì ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä\n"
        "‚Ä¢ üéÆ Play ‚Äì ‡§õ‡•ã‡§ü‡§æ ‡§ó‡•á‡§Æ\n"
        "‚Ä¢ ‚ÑπÔ∏è Help ‚Äì ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•Ç‡§ö‡•Ä\n"
    )
    bot.reply_to(message, text, reply_markup=main_menu())

@bot.message_handler(commands=["help"])
def cmd_help(message: types.Message):
    text = (
        "‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•Ç‡§ö‡•Ä:\n"
        "/start ‚Äì ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç\n"
        "/help ‚Äì ‡§Æ‡§¶‡§¶\n"
        "/wallet ‚Äì ‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü‡•ã ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏\n"
        "/balance ‚Äì ‡§ï‡•â‡§á‡§® ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏\n"
        "/premium ‚Äì ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏\n"
        "/play ‚Äì ‡§õ‡•ã‡§ü‡§æ ‡§ó‡•á‡§Æ\n"
        "/admin ‚Äì (‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§®)\n"
    )
    bot.reply_to(message, text, reply_markup=main_menu())

@bot.message_handler(commands=["wallet"])
def cmd_wallet(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)
    w = WALLETS.get(uid, {})
    text = (
        "üßæ <b>Wallet</b>\n"
        f"USDT: <b>{w.get('usdt', 0):.2f}</b>\n"
        f"BTC: <b>{w.get('btc', 0):.8f}</b>\n"
        f"ETH: <b>{w.get('eth', 0):.6f}</b>\n"
    )
    bot.reply_to(message, text, reply_markup=main_menu())

@bot.message_handler(commands=["balance"])
def cmd_balance(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)
    coins = USERS[uid]["coins"]
    bot.reply_to(message, f"ü™ô ‡§Ü‡§™‡§ï‡•á ‡§ï‡•â‡§á‡§®: <b>{coins}</b>", reply_markup=main_menu())

@bot.message_handler(commands=["premium"])
def cmd_premium(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)
    is_premium = USERS[uid]["premium"]
    status = "ON ‚úÖ" if is_premium else "OFF ‚ùå"
    bot.reply_to(message, f"‚≠ê Premium: <b>{status}</b>", reply_markup=main_menu())

@bot.message_handler(commands=["play"])
def cmd_play(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)
    # Simple guess game
    import random
    secret = random.randint(1, 5)
    if secret in (1, 2):
        USERS[uid]["coins"] += 10
        bot.reply_to(message, "üéâ ‡§Ü‡§™‡§®‡•á 10 ‡§ï‡•â‡§á‡§® ‡§ú‡•Ä‡§§‡•á! (/balance ‡§¶‡•á‡§ñ‡•á‡§Ç)", reply_markup=main_menu())
    else:
        lose = min(5, USERS[uid]["coins"])
        USERS[uid]["coins"] -= lose
        bot.reply_to(message, f"üôà ‡§Ü‡§™ ‡§π‡§æ‡§∞ ‡§ó‡§è, {lose} ‡§ï‡•â‡§á‡§® ‡§ï‡§ü‡•á. (/balance)", reply_markup=main_menu())

@bot.message_handler(commands=["admin"])
def cmd_admin(message: types.Message):
    if not ADMIN_ID or str(message.from_user.id) != str(ADMIN_ID):
        bot.reply_to(message, "‚õî ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à.", reply_markup=main_menu())
        return
    bot.reply_to(message, "üõ† Admin Panel", reply_markup=admin_menu())

# -------------------
# Text Buttons Handling
# -------------------
@bot.message_handler(func=lambda m: m.text in ["üí∞ Wallet", "ü™ô Balance", "‚≠ê Premium", "üéÆ Play", "‚ÑπÔ∏è Help"])
def button_router(message: types.Message):
    txt = message.text
    if txt == "üí∞ Wallet":
        return cmd_wallet(message)
    if txt == "ü™ô Balance":
        return cmd_balance(message)
    if txt == "‚≠ê Premium":
        return cmd_premium(message)
    if txt == "üéÆ Play":
        return cmd_play(message)
    if txt == "‚ÑπÔ∏è Help":
        return cmd_help(message)

# Admin buttons
@bot.message_handler(func=lambda m: m.text in ["üë• Users Count", "‚ûï Add Coins", "‚¨ÖÔ∏è Back"])
def admin_buttons(message: types.Message):
    if not ADMIN_ID or str(message.from_user.id) != str(ADMIN_ID):
        return bot.reply_to(message, "‚õî ‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§®.", reply_markup=main_menu())
    if message.text == "üë• Users Count":
        bot.reply_to(message, f"‡§ï‡•Å‡§≤ ‡§Ø‡•Ç‡§ú‡§º‡§∞‡•ç‡§∏: <b>{len(USERS)}</b>", reply_markup=admin_menu())
    elif message.text == "‚ûï Add Coins":
        bot.reply_to(message, "‡§ï‡§ø‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§ï‡•ã ‡§ï‡§ø‡§§‡§®‡•á ‡§ï‡•â‡§á‡§®? Format: <code>/give user_id coins</code>\n‡§â‡§¶‡§æ: <code>/give 123456789 50</code>", reply_markup=admin_menu())
    elif message.text == "‚¨ÖÔ∏è Back":
        bot.reply_to(message, "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•ç‡§Ø‡•Ç", reply_markup=main_menu())

@bot.message_handler(commands=["give"])
def cmd_give(message: types.Message):
    # Only admin
    if not ADMIN_ID or str(message.from_user.id) != str(ADMIN_ID):
        return bot.reply_to(message, "‚õî ‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§®.", reply_markup=main_menu())
    try:
        parts = message.text.strip().split()
        # /give <user_id> <coins>
        if len(parts) != 3:
            return bot.reply_to(message, "Format: <code>/give user_id coins</code>")
        uid = int(parts[1])
        amt = int(parts[2])
        ensure_user(uid)
        USERS[uid]["coins"] += amt
        bot.reply_to(message, f"‚úÖ {uid} ‡§ï‡•ã {amt} ‡§ï‡•â‡§á‡§® ‡§¶‡•á ‡§¶‡§ø‡§Ø‡•á ‡§ó‡§è.", reply_markup=admin_menu())
    except Exception as e:
        log.exception("give error")
        bot.reply_to(message, f"‚ùå Error: {e}")

# -------------------
# Default text (‡§Ö‡§¨ echo ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§ó‡§æ)
# -------------------
@bot.message_handler(func=lambda m: True, content_types=["text"])
def fallback_text(message: types.Message):
    bot.reply_to(
        message,
        "‡§Æ‡•à‡§Ç‡§®‡•á ‡§∏‡§Æ‡§ù‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§¨‡§ü‡§®‡•ã‡§Ç/‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç:\n"
        "‚Ä¢ /start ‚Ä¢ /help ‚Ä¢ /wallet ‚Ä¢ /balance ‚Ä¢ /premium ‚Ä¢ /play",
        reply_markup=main_menu(),
    )

# -------------------
# Webhook setup & Flask
# -------------------
@app.route("/", methods=["GET", "HEAD"])
def health():
    return "OK", 200

@app.route("/webhook/<token>", methods=["POST"])
def webhook(token):
    # Basic security: path token must match the bot token
    if token != BOT_TOKEN:
        abort(403)
    if request.headers.get("content-type") == "application/json":
        json_update = request.get_json(force=True)
        update = telebot.types.Update.de_json(json_update)
        bot.process_new_updates([update])
        return jsonify(ok=True)
    abort(400)

def set_webhook():
    if not WEBHOOK_BASE_URL:
        log.error("WEBHOOK_BASE_URL missing. Set it in env and redeploy.")
        return False
    url = f"{WEBHOOK_BASE_URL.rstrip('/')}/webhook/{BOT_TOKEN}"
    # Drop pending updates so ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§® ‡§Ü‡§è‡§Å
    ok = bot.set_webhook(url=url, drop_pending_updates=True)
    if ok:
        log.info(f"üîó Webhook set to: {url}")
    else:
        log.error("Failed to set webhook (Telegram returned False).")
    return ok

if __name__ == "__main__":
    # Reset & set webhook safely
    try:
        bot.remove_webhook()
    except Exception:
        pass
    set_webhook()
    app.run(host="0.0.0.0", port=PORT)
